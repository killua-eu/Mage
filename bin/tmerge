#!/usr/bin/env bash


. /etc/mage.conf              # get conf file
. /etc/init.d/functions.sh    # get gentoo functions
. /etc/make.conf              # get make.conf (compat for old portage versions)
. /etc/portage/make.conf      # get make.conf (current portage versions)

# get available memory
if [ "`free -m | grep available | awk '{print $NF}'`" == "available" ]  ; then 
memfree=`free -m | grep Mem | awk '{print $NF}'`        # exact value available since kernel 3.14
else
memfree=`free -m | awk '{print $4}'| head -3| tail -1`  # compat value computation for kernel version < 3.14
fi

# Leave 200M free, require at least ${MAGE_TMERGE_ALLOC} set in /etc/mage.conf. 
# If not set then use ${MAGE_TMERGE_ALLOC}=400

alloc=$[$memfree-200]
[[ -z "${MAGE_TMERGE_ALLOC}" ]] && MAGE_TMERGE_ALLOC=5500
[[ ${alloc} -lt ${MAGE_TMERGE_ALLOC} ]] && echo "Not enough memory (${memfree} MB available), exiting. Set the default MAGE_TMERGE_ALLOC=5500 in /etc/mage.conf to a lower value, or free up some memory" && exit
echo "Allocating ${alloc} MB for tmpfs"

mounted=false


echo ${PORTAGE_TMPDIR}
if [ ! -d "${PORTAGE_TMPDIR}" ]; then
  einfo "${PORTAGE_TMPDIR} (PORTAGE_TMPDIR) doesn't exist, creating ..."
  mkdir -p $PORTAGE_TMPDIR
fi


mounttmpfs() {
                mount -t tmpfs -o size=${alloc}M,nr_inodes=1M tmpfs ${PORTAGE_TMPDIR}
                sleep 1
                mounted="true"
}

compile() {
        einfo "running emerge ${*}"
                emerge ${*}
}

unmount() {
        ebegin "unmounting tmpfs"
                umount -f ${PORTAGE_TMPDIR}
        eend $?
}

ebegin "Mounting $alloc of memory to ${PORTAGE_TMPDIR}"
        if [ -z "$(pgrep -f /usr/bin/emerge)" ];then
                if [ -z "$(mount | grep ${PORTAGE_TMPDIR})" ];then
                     mounttmpfs
                else
                     eerror "tmpfs already mounted!"
                     exit 0
                fi
        else
                eerror "emerge already running!"
                exit 0
        fi
eend $?

# if available, change the cpu-governor to the highest frequency
[ -f /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor ] && gov=`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor` && echo performance > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor

# run emerge
compile $@

# unmount tmpfs
$mounted && umount ${PORTAGE_TMPDIR}

# set the cpu-governor to original state
[ -f /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor ] && echo ${gov} > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor


